@page "/desserts"
@using HealthJournal.Services
@using HealthJournal.Models
@inject DessertService DessertService
@rendermode InteractiveServer

<h3>Desserts</h3>

@if (desserts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="@(invalidQuantity ? "invalid" : "")">
        <input @bind="newDessertName" class="dessertInput" />
        <input @bind="newDessertQtyString" class="dessertInput" />
        <input @bind="selectedDate" type="date" id="datePicker" name="datePicker" min="2024-01-01" max="2025-12-31" required
            class="dessertInput" />
        @if (invalidQuantity)
        {
            <div class="validation-message">Please enter a valid number greater than 0</div>
        }
        <button @onclick="AddDessert" class="btn btn-primary dessertInput">Add Dessert
            Item</button>
    </div>
    <br>
    <br>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dessert in desserts)
            {
                <tr>
                    <td>@dessert.name</td>
                    <td>@dessert.quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Dessert> desserts = new();
    string newDessertName = "";
    string newDessertQtyString = "";

    bool invalidQuantity = false;

    DateTime selectedDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        desserts = await DessertService.GetDessertsAsync();
    }

    async Task AddDessert()
    {
        invalidQuantity = false;

        if (!int.TryParse(newDessertQtyString, out int quantity) || quantity <= 0)
        {
            invalidQuantity = true;
            return;
        }

        if (!string.IsNullOrWhiteSpace(newDessertName) && !invalidQuantity)
        {
            Dessert newDessert = new Dessert { name = newDessertName, quantity = quantity };
            bool success = await DessertService.CreateDessertAsync(newDessert);
            if (success)
            {
                desserts = await DessertService.GetDessertsAsync();
                newDessertName = string.Empty;
                newDessertQtyString = string.Empty;
            }
        }
    }
}

<style>
    .invalid input {
        border-color: red;
    }

    .validation-message {
        color: red;
        font-size: 0.8em;
    }

    .dessertInput {
        height: 40px;
        vertical-align: top;
        border: 1px solid #000000;
    }
</style>